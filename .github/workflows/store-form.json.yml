name: Store form submit as JSON (and rebuild CSV)
on:
  repository_dispatch:
    types: [form_submit]

permissions:
  contents: write

# One-at-a-time across the repo to avoid push races
concurrency:
  group: forms-io
  cancel-in-progress: false

jobs:
  save_and_merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Save payload to data/submissions/*.json
        run: |
          mkdir -p data/submissions
          python - <<'PY'
          import os, json, time, uuid, pathlib
          ev = json.load(open(os.environ['GITHUB_EVENT_PATH']))
          payload = ev.get('client_payload', {})
          payload.setdefault('submitted_at', time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime()))
          fname = time.strftime('%Y%m%dT%H%M%SZ', time.gmtime()) + "_" + uuid.uuid4().hex[:6] + ".json"
          out = pathlib.Path("data/submissions")/fname
          out.write_text(json.dumps(payload, ensure_ascii=False, indent=2))
          PY

      - name: Rebuild CSV from all JSON
        run: |
          python - <<'PY'
          import csv, json, glob, os
          from datetime import datetime
          fields = ["submitted_at","email","goal","role","availability","data_sources","outcome","company_website"]
          rows = []
          for path in sorted(glob.glob("data/submissions/*.json")):
              with open(path, encoding="utf-8") as f:
                  d = json.load(f)
              rows.append([d.get(k,"") for k in fields])

          def parse(ts):
              try: return datetime.fromisoformat(ts.replace('Z','+00:00'))
              except: return datetime.min
          rows.sort(key=lambda r: parse(rows[0][0]) if rows and rows[0][0] else datetime.min)

          os.makedirs("data", exist_ok=True)
          with open("data/discovery_form.csv","w", newline="", encoding="utf-8") as f:
              w = csv.writer(f, quoting=csv.QUOTE_ALL)
              w.writerow(fields)
              w.writerows(rows)
          PY

      - name: Commit & push (rebase-retry)
        run: |
          set -e
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add data/submissions data/discovery_form.csv
          if git diff --cached --quiet; then
            echo "No changes"; exit 0
          fi
          git commit -m "form: add submission + rebuild CSV"
          BRANCH="$(git symbolic-ref --quiet --short HEAD || echo main)"
          for i in 1 2 3; do
            git pull --rebase origin "$BRANCH" || true
            if git push; then exit 0; fi
            echo "Push failed, retrying ($i/3)..."
            sleep 2
          done
          echo "Push failed after 3 attempts" >&2
          exit 1
